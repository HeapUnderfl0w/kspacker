//! Warning! This is autogenerated code that might show some wierd behavior
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct KeysightPresetElement {
    pub name:                        String,
    pub author:                      String,
    pub description:                 String,
    #[serde(rename = "useLocalCoreSettings")]
    pub use_local_core_settings:     bool,
    #[serde(rename = "coreSettings")]
    pub core_settings:               CoreSettings,
    pub effects:                     Effects,
    pub scene:                       Scene,
    #[serde(rename = "orderIndex")]
    pub order_index:                 f64,
    #[serde(rename = "lastDetectedRandomSeed")]
    pub last_detected_random_seed:   String,
    #[serde(rename = "versionForUpdatePurposes")]
    pub version_for_update_purposes: f64,
    pub widgets:                     Widgets,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CoreSettings {
    #[serde(rename = "noteBehaviour")]
    pub note_behaviour:   NoteBehaviour,
    #[serde(rename = "pianoSimulation")]
    pub piano_simulation: PianoSimulation,
    pub viewport:         Viewport,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NoteBehaviour {
    #[serde(rename = "real-time")]
    pub real_time:                    bool,
    pub height:                       f64,
    pub speed:                        f64,
    #[serde(rename = "lockTimeDelay")]
    pub lock_time_delay:              bool,
    #[serde(rename = "variableSpeedMultiplier")]
    pub variable_speed_multiplier:    f64,
    #[serde(rename = "variableSpeedRamping")]
    pub variable_speed_ramping:       f64,
    #[serde(rename = "speedMultiplierByVelocity")]
    pub speed_multiplier_by_velocity: SpeedMultiplierByVelocity,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SpeedMultiplierByVelocity {
    pub start:          f64,
    pub stop:           f64,
    pub min:            f64,
    pub max:            f64,
    pub curve:          f64,
    #[serde(rename = "graphMin")]
    pub graph_min:      f64,
    #[serde(rename = "graphMax")]
    pub graph_max:      f64,
    #[serde(rename = "useFlatValue")]
    pub use_flat_value: bool,
    pub flag:           bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PianoSimulation {
    #[serde(rename = "midiFloor")]
    pub midi_floor:                  f64,
    #[serde(rename = "midiCeiling")]
    pub midi_ceiling:                f64,
    #[serde(rename = "midiCull")]
    pub midi_cull:                   f64,
    #[serde(rename = "midiTranspose")]
    pub midi_transpose:              f64,
    #[serde(rename = "releaseA0")]
    pub release_a0:                  f64,
    #[serde(rename = "releaseC8")]
    pub release_c8:                  f64,
    #[serde(rename = "decayA0")]
    pub decay_a0:                    f64,
    #[serde(rename = "decayC8")]
    pub decay_c8:                    f64,
    #[serde(rename = "sustainFloor")]
    pub sustain_floor:               f64,
    #[serde(rename = "sustainCeiling")]
    pub sustain_ceiling:             f64,
    #[serde(rename = "noteForceByNoteActivity")]
    pub note_force_by_note_activity: SpeedMultiplierByVelocity,
    #[serde(rename = "noteForceUsesSustain")]
    pub note_force_uses_sustain:     bool,
    #[serde(rename = "pitchBendSemitones")]
    pub pitch_bend_semitones:        f64,
    #[serde(rename = "pitchBendMinHue")]
    pub pitch_bend_min_hue:          f64,
    #[serde(rename = "pitchBendMaxHue")]
    pub pitch_bend_max_hue:          f64,
    #[serde(rename = "colourLookahead")]
    pub colour_lookahead:            f64,
    #[serde(rename = "colourSensitivity")]
    pub colour_sensitivity:          f64,
    #[serde(rename = "allowPitchBend")]
    pub allow_pitch_bend:            bool,
    #[serde(rename = "highRegisterDampers")]
    pub high_register_dampers:       bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Viewport {
    #[serde(rename = "cameraLocation")]
    pub camera_location:             CameraLocation,
    #[serde(rename = "cameraRotation")]
    pub camera_rotation:             CameraRotation,
    #[serde(rename = "cameraLocalRoll")]
    pub camera_local_roll:           f64,
    #[serde(rename = "cameraFOV")]
    pub camera_fov:                  f64,
    #[serde(rename = "pianoKeyLength")]
    pub piano_key_length:            f64,
    #[serde(rename = "pianoKeysAnimate")]
    pub piano_keys_animate:          bool,
    #[serde(rename = "pianoSelfLighting")]
    pub piano_self_lighting:         f64,
    pub bloom:                       f64,
    #[serde(rename = "cullOutOfBoundsObjects")]
    pub cull_out_of_bounds_objects:  bool,
    #[serde(rename = "cullVerticalOutOfBounds")]
    pub cull_vertical_out_of_bounds: bool,
    #[serde(rename = "keyAnimationSpeed")]
    pub key_animation_speed:         f64,
    #[serde(rename = "softPedalVisualization")]
    pub soft_pedal_visualization:    bool,
    #[serde(rename = "softBloom")]
    pub soft_bloom:                  f64,
    #[serde(rename = "softExposure")]
    pub soft_exposure:               f64,
    #[serde(rename = "softBlendTime")]
    pub soft_blend_time:             f64,
    #[serde(rename = "offsetKeybed")]
    pub offset_keybed:               bool,
    #[serde(rename = "keybedY")]
    pub keybed_y:                    f64,
    #[serde(rename = "keybedZ")]
    pub keybed_z:                    f64,
    #[serde(rename = "keybedRotation")]
    pub keybed_rotation:             f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CameraLocation {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CameraRotation {
    pub pitch: f64,
    pub yaw:   f64,
    pub roll:  f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Effects {
    #[serde(rename = "noteObjects")]
    pub note_objects:  NoteObjects,
    #[serde(rename = "noteLights")]
    pub note_lights:   NoteLights,
    pub keypresses:    Keypresses,
    #[serde(rename = "impactLights")]
    pub impact_lights: ImpactLights,
    pub pulses:        Pulses,
    pub particles:     Particles,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ImpactLights {
    #[serde(rename = "impactLightsEnabled")]
    pub impact_lights_enabled:               bool,
    #[serde(rename = "impactCastShadows")]
    pub impact_cast_shadows:                 bool,
    #[serde(rename = "impactBackdrop")]
    pub impact_backdrop:                     bool,
    #[serde(rename = "impactNote")]
    pub impact_note:                         bool,
    #[serde(rename = "impactPiano")]
    pub impact_piano:                        bool,
    #[serde(rename = "impactLastsWithSustain")]
    pub impact_lasts_with_sustain:           bool,
    #[serde(rename = "impactZHeight")]
    pub impact_z_height:                     f64,
    #[serde(rename = "impactVerticalDisplacement")]
    pub impact_vertical_displacement:        f64,
    #[serde(rename = "impactRadiusMax")]
    pub impact_radius_max:                   f64,
    #[serde(rename = "impactRadiusMinProportion")]
    pub impact_radius_min_proportion:        f64,
    #[serde(rename = "impactMaxBrightness")]
    pub impact_max_brightness:               f64,
    #[serde(rename = "impactRamping")]
    pub impact_ramping:                      f64,
    #[serde(rename = "newImpactDestroysOld")]
    pub new_impact_destroys_old:             bool,
    #[serde(rename = "fadeInCurve")]
    pub fade_in_curve:                       SpeedMultiplierByVelocity,
    #[serde(rename = "impactFadeTime")]
    pub impact_fade_time:                    f64,
    #[serde(rename = "impactFadeStart")]
    pub impact_fade_start:                   f64,
    #[serde(rename = "impactCandleFlicker")]
    pub impact_candle_flicker:               bool,
    #[serde(rename = "impactCandleSpeedMax")]
    pub impact_candle_speed_max:             f64,
    #[serde(rename = "impactCandleSpeedMinProportion")]
    pub impact_candle_speed_min_proportion:  f64,
    #[serde(rename = "impactCandleDeviation")]
    pub impact_candle_deviation:             f64,
    #[serde(rename = "impactLightFalloff")]
    pub impact_light_falloff:                f64,
    #[serde(rename = "impactColour")]
    pub impact_colour:                       ImpactColour,
    #[serde(rename = "impactRadiusByVelocity")]
    pub impact_radius_by_velocity:           SpeedMultiplierByVelocity,
    #[serde(rename = "impactFlickerByVelocity")]
    pub impact_flicker_by_velocity:          SpeedMultiplierByVelocity,
    #[serde(rename = "impactFlickerPositionByVelocity")]
    pub impact_flicker_position_by_velocity: SpeedMultiplierByVelocity,
    #[serde(rename = "impactDeviationByVelocity")]
    pub impact_deviation_by_velocity:        SpeedMultiplierByVelocity,
    #[serde(rename = "impactYByVelocity")]
    pub impact_y_by_velocity:                SpeedMultiplierByVelocity,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ImpactColour {
    pub colours:                 Vec<Colour>,
    pub mode:                    String,
    pub slots:                   f64,
    #[serde(rename = "colourChangeOverTime")]
    pub colour_change_over_time: bool,
    #[serde(rename = "colourChangeSpeed")]
    pub colour_change_speed:     f64,
    #[serde(rename = "activityMin")]
    pub activity_min:            f64,
    #[serde(rename = "activityMax")]
    pub activity_max:            f64,
    #[serde(rename = "nPSMin")]
    pub n_ps_min:                f64,
    #[serde(rename = "nPSMax")]
    pub n_ps_max:                f64,
    pub curve:                   f64,
    pub ramping:                 f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Colour {
    pub r: f64,
    pub g: f64,
    pub b: f64,
    pub a: f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Keypresses {
    #[serde(rename = "keypressesEnabled")]
    pub keypresses_enabled:        bool,
    #[serde(rename = "keypressLifetime")]
    pub keypress_lifetime:         f64,
    #[serde(rename = "keypressAlphaFade")]
    pub keypress_alpha_fade:       bool,
    #[serde(rename = "keypressVerticalFade")]
    pub keypress_vertical_fade:    bool,
    #[serde(rename = "keypressHorizontalFade")]
    pub keypress_horizontal_fade:  bool,
    #[serde(rename = "keypressFadeRamping")]
    pub keypress_fade_ramping:     f64,
    #[serde(rename = "fadeOut2Axis")]
    pub fade_out2_axis:            SpeedMultiplierByVelocity,
    #[serde(rename = "fadeInTime")]
    pub fade_in_time:              f64,
    #[serde(rename = "forceFullFadeIn")]
    pub force_full_fade_in:        bool,
    #[serde(rename = "keypressMaterial")]
    pub keypress_material:         Material,
    #[serde(rename = "keypressColourPrimary")]
    pub keypress_colour_primary:   ImpactColour,
    #[serde(rename = "keypressColourSecondary")]
    pub keypress_colour_secondary: ImpactColour,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Material {
    #[serde(rename = "materialMode")]
    pub material_mode:           String,
    #[serde(rename = "diffuseTexture")]
    pub diffuse_texture:         String,
    #[serde(rename = "diffuseColour")]
    pub diffuse_colour:          Colour,
    #[serde(rename = "diffuseColour2")]
    pub diffuse_colour2:         Colour,
    #[serde(rename = "diffuseUseTexture")]
    pub diffuse_use_texture:     bool,
    #[serde(rename = "emissiveTexture")]
    pub emissive_texture:        String,
    #[serde(rename = "emissiveColour")]
    pub emissive_colour:         Colour,
    #[serde(rename = "emissiveColour2")]
    pub emissive_colour2:        Colour,
    #[serde(rename = "emissiveUseTexture")]
    pub emissive_use_texture:    bool,
    #[serde(rename = "emissiveMin")]
    pub emissive_min:            f64,
    #[serde(rename = "emissiveMax")]
    pub emissive_max:            f64,
    #[serde(rename = "emissiveMin2")]
    pub emissive_min2:           f64,
    #[serde(rename = "emissiveMax2")]
    pub emissive_max2:           f64,
    #[serde(rename = "emissiveRamping")]
    pub emissive_ramping:        f64,
    #[serde(rename = "emissiveOn")]
    pub emissive_on:             bool,
    #[serde(rename = "emissiveOn2")]
    pub emissive_on2:            bool,
    #[serde(rename = "emissive1ByVelocity")]
    pub emissive1_by_velocity:   SpeedMultiplierByVelocity,
    #[serde(rename = "emissive2ByVelocity")]
    pub emissive2_by_velocity:   SpeedMultiplierByVelocity,
    #[serde(rename = "specularTexture")]
    pub specular_texture:        String,
    #[serde(rename = "specularValue")]
    pub specular_value:          f64,
    #[serde(rename = "specularValue2")]
    pub specular_value2:         f64,
    #[serde(rename = "specularUseTexture")]
    pub specular_use_texture:    bool,
    #[serde(rename = "roughnessTexture")]
    pub roughness_texture:       String,
    #[serde(rename = "roughnessValue")]
    pub roughness_value:         f64,
    #[serde(rename = "roughnessValue2")]
    pub roughness_value2:        f64,
    #[serde(rename = "roughnessUseTexture")]
    pub roughness_use_texture:   bool,
    #[serde(rename = "metalnessTexture")]
    pub metalness_texture:       String,
    #[serde(rename = "metalnessValue")]
    pub metalness_value:         f64,
    #[serde(rename = "metalnessValue2")]
    pub metalness_value2:        f64,
    #[serde(rename = "metalnessUseTexture")]
    pub metalness_use_texture:   bool,
    #[serde(rename = "normalTexture")]
    pub normal_texture:          String,
    #[serde(rename = "normalOn")]
    pub normal_on:               bool,
    #[serde(rename = "normalStrength")]
    pub normal_strength:         f64,
    #[serde(rename = "maskTexture")]
    pub mask_texture:            String,
    #[serde(rename = "maskOn")]
    pub mask_on:                 bool,
    #[serde(rename = "flipMask")]
    pub flip_mask:               bool,
    #[serde(rename = "opacityValue")]
    pub opacity_value:           f64,
    #[serde(rename = "textureWidthScale")]
    pub texture_width_scale:     f64,
    #[serde(rename = "textureHeightScale")]
    pub texture_height_scale:    f64,
    #[serde(rename = "textureWidthOffset")]
    pub texture_width_offset:    f64,
    #[serde(rename = "textureHeightOffset")]
    pub texture_height_offset:   f64,
    #[serde(rename = "textureDisplace")]
    pub texture_displace:        String,
    #[serde(rename = "textureRandomMapping")]
    pub texture_random_mapping:  bool,
    #[serde(rename = "textureRotation")]
    pub texture_rotation:        f64,
    #[serde(rename = "textureRandomRotation")]
    pub texture_random_rotation: bool,
    #[serde(rename = "textureSize")]
    pub texture_size:            f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NoteLights {
    #[serde(rename = "noteLightsEnabled")]
    pub note_lights_enabled:                  bool,
    #[serde(rename = "noteLightBackdrop")]
    pub note_light_backdrop:                  bool,
    #[serde(rename = "noteLightNote")]
    pub note_light_note:                      bool,
    #[serde(rename = "noteLightPiano")]
    pub note_light_piano:                     bool,
    #[serde(rename = "noteLightBrightnessMax")]
    pub note_light_brightness_max:            f64,
    #[serde(rename = "noteLightBrightnessMinProportion")]
    pub note_light_brightness_min_proportion: f64,
    pub concentration:                        f64,
    #[serde(rename = "noteLightRamping")]
    pub note_light_ramping:                   f64,
    #[serde(rename = "noteLightChangeOverTime")]
    pub note_light_change_over_time:          bool,
    #[serde(rename = "noteLightColour")]
    pub note_light_colour:                    ImpactColour,
    #[serde(rename = "noteLightBrightnessByVelocity")]
    pub note_light_brightness_by_velocity:    SpeedMultiplierByVelocity,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NoteObjects {
    #[serde(rename = "noteObjectsEnabled")]
    pub note_objects_enabled:         bool,
    #[serde(rename = "forceReleaseOnNewNote")]
    pub force_release_on_new_note:    bool,
    #[serde(rename = "noteObjectShape")]
    pub note_object_shape:            String,
    #[serde(rename = "noteObjectBorder")]
    pub note_object_border:           String,
    #[serde(rename = "whiteKeyScaleByVelocity")]
    pub white_key_scale_by_velocity:  SpeedMultiplierByVelocity,
    #[serde(rename = "whiteKeyMinSize")]
    pub white_key_min_size:           f64,
    #[serde(rename = "whiteKeyZScale")]
    pub white_key_z_scale:            f64,
    #[serde(rename = "blackKeyScaleByVelocity")]
    pub black_key_scale_by_velocity:  SpeedMultiplierByVelocity,
    #[serde(rename = "blackKeyMinSize")]
    pub black_key_min_size:           f64,
    #[serde(rename = "blackKeyZScale")]
    pub black_key_z_scale:            f64,
    #[serde(rename = "whiteKeyVerticalOffset")]
    pub white_key_vertical_offset:    f64,
    #[serde(rename = "blackKeyVerticalOffset")]
    pub black_key_vertical_offset:    f64,
    #[serde(rename = "noteShapeOverride")]
    pub note_shape_override:          String,
    #[serde(rename = "geometryNormalAmount")]
    pub geometry_normal_amount:       f64,
    #[serde(rename = "castShadows")]
    pub cast_shadows:                 bool,
    #[serde(rename = "noteObjectMaterial")]
    pub note_object_material:         Material,
    #[serde(rename = "noteObjectTexturePanning")]
    pub note_object_texture_panning:  BackdropTexturePanning,
    #[serde(rename = "noteObjectPanRandom")]
    pub note_object_pan_random:       bool,
    #[serde(rename = "noteObjectColourPrimary")]
    pub note_object_colour_primary:   ImpactColour,
    #[serde(rename = "noteObjectColourSecondary")]
    pub note_object_colour_secondary: ImpactColour,
    #[serde(rename = "noteBorderMaterial")]
    pub note_border_material:         Material,
    #[serde(rename = "noteBorderTexturePanning")]
    pub note_border_texture_panning:  BackdropTexturePanning,
    #[serde(rename = "noteBorderPanRandom")]
    pub note_border_pan_random:       bool,
    #[serde(rename = "noteBorderColourPrimary")]
    pub note_border_colour_primary:   ImpactColour,
    #[serde(rename = "noteBorderColourSecondary")]
    pub note_border_colour_secondary: ImpactColour,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct BackdropTexturePanning {
    pub x: f64,
    pub y: f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Particles {
    #[serde(rename = "particlesEnabled")]
    pub particles_enabled:           bool,
    #[serde(rename = "particleV2Array")]
    pub particle_v2_array:           Vec<ParticleV2Array>,
    #[serde(rename = "pickRandomSingleParticle")]
    pub pick_random_single_particle: bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ParticleV2Array {
    pub enabled:                            bool,
    pub name:                               String,
    pub author:                             String,
    pub description:                        String,
    #[serde(rename = "useDynamicVelocity")]
    pub use_dynamic_velocity:               bool,
    #[serde(rename = "allowInRandomPool")]
    pub allow_in_random_pool:               bool,
    #[serde(rename = "minActivation")]
    pub min_activation:                     f64,
    #[serde(rename = "maxActivation")]
    pub max_activation:                     f64,
    #[serde(rename = "useCPU")]
    pub use_cpu:                            bool,
    #[serde(rename = "timeOffset")]
    pub time_offset:                        f64,
    #[serde(rename = "heightAboveBackdrop")]
    pub height_above_backdrop:              f64,
    #[serde(rename = "locationOffset")]
    pub location_offset:                    f64,
    #[serde(rename = "locationRandomness")]
    pub location_randomness:                f64,
    #[serde(rename = "spawnRateByVelocity")]
    pub spawn_rate_by_velocity:             SpeedMultiplierByVelocity,
    #[serde(rename = "spawnFadeoutTime")]
    pub spawn_fadeout_time:                 f64,
    #[serde(rename = "spawnRateChance")]
    pub spawn_rate_chance:                  f64,
    #[serde(rename = "lifetimeRandomness")]
    pub lifetime_randomness:                f64,
    #[serde(rename = "lifetimeByVelocity")]
    pub lifetime_by_velocity:               SpeedMultiplierByVelocity,
    pub shape:                              String,
    #[serde(rename = "useShapeColour")]
    pub use_shape_colour:                   bool,
    #[serde(rename = "useTranslucent")]
    pub use_translucent:                    bool,
    #[serde(rename = "cullHorizontal")]
    pub cull_horizontal:                    bool,
    #[serde(rename = "cullVertical")]
    pub cull_vertical:                      bool,
    #[serde(rename = "sizeRandomness")]
    pub size_randomness:                    f64,
    #[serde(rename = "sizeByVelocity")]
    pub size_by_velocity:                   SpeedMultiplierByVelocity,
    #[serde(rename = "sizeByLifetime")]
    pub size_by_lifetime:                   SpeedMultiplierByVelocity,
    #[serde(rename = "speedByVelocity")]
    pub speed_by_velocity:                  SpeedMultiplierByVelocity,
    #[serde(rename = "stretchXByVelocity")]
    pub stretch_x_by_velocity:              SpeedMultiplierByVelocity,
    #[serde(rename = "stretchYByVelocity")]
    pub stretch_y_by_velocity:              SpeedMultiplierByVelocity,
    #[serde(rename = "particleColours")]
    pub particle_colours:                   ImpactColour,
    #[serde(rename = "colourHueRandomness")]
    pub colour_hue_randomness:              f64,
    #[serde(rename = "colourSatRandomness")]
    pub colour_sat_randomness:              f64,
    #[serde(rename = "colourValRandomness")]
    pub colour_val_randomness:              f64,
    #[serde(rename = "colourBrightnessByVelocity")]
    pub colour_brightness_by_velocity:      SpeedMultiplierByVelocity,
    #[serde(rename = "colourFlickerByVelocity")]
    pub colour_flicker_by_velocity:         SpeedMultiplierByVelocity,
    #[serde(rename = "colourFlickerSpeedByVelocity")]
    pub colour_flicker_speed_by_velocity:   SpeedMultiplierByVelocity,
    #[serde(rename = "colourSaturationByLifetime")]
    pub colour_saturation_by_lifetime:      SpeedMultiplierByVelocity,
    #[serde(rename = "colourAlpha1ByLifetime")]
    pub colour_alpha1_by_lifetime:          SpeedMultiplierByVelocity,
    #[serde(rename = "colourAlpha2ByLifetime")]
    pub colour_alpha2_by_lifetime:          SpeedMultiplierByVelocity,
    #[serde(rename = "colourBrightnessByLifetime")]
    pub colour_brightness_by_lifetime:      SpeedMultiplierByVelocity,
    #[serde(rename = "colourHueByLifetime")]
    pub colour_hue_by_lifetime:             SpeedMultiplierByVelocity,
    #[serde(rename = "velocityRandomnessX")]
    pub velocity_randomness_x:              f64,
    #[serde(rename = "velocityXByVelocity")]
    pub velocity_x_by_velocity:             SpeedMultiplierByVelocity,
    #[serde(rename = "velocityRandomnessY")]
    pub velocity_randomness_y:              f64,
    #[serde(rename = "velocityYByVelocity")]
    pub velocity_y_by_velocity:             SpeedMultiplierByVelocity,
    #[serde(rename = "accelerationRandomnessX")]
    pub acceleration_randomness_x:          f64,
    #[serde(rename = "accelerationXByLifetime")]
    pub acceleration_x_by_lifetime:         SpeedMultiplierByVelocity,
    #[serde(rename = "accelerationRandomnessY")]
    pub acceleration_randomness_y:          f64,
    #[serde(rename = "accelerationYByLifetime")]
    pub acceleration_y_by_lifetime:         SpeedMultiplierByVelocity,
    #[serde(rename = "accelerationCentreByLifetime")]
    pub acceleration_centre_by_lifetime:    SpeedMultiplierByVelocity,
    #[serde(rename = "accelerationDragByLifetime")]
    pub acceleration_drag_by_lifetime:      SpeedMultiplierByVelocity,
    #[serde(rename = "noteWindStrengthByLifetime")]
    pub note_wind_strength_by_lifetime:     SpeedMultiplierByVelocity,
    #[serde(rename = "noteWindStrengthX")]
    pub note_wind_strength_x:               f64,
    #[serde(rename = "noteWindStrengthY")]
    pub note_wind_strength_y:               f64,
    #[serde(rename = "noteWindFalloff")]
    pub note_wind_falloff:                  f64,
    #[serde(rename = "vectorFieldStrengthByVelocity")]
    pub vector_field_strength_by_velocity:  SpeedMultiplierByVelocity,
    #[serde(rename = "vectorFieldStrengthByLifetime")]
    pub vector_field_strength_by_lifetime:  SpeedMultiplierByVelocity,
    #[serde(rename = "vectorFieldInfluenceX")]
    pub vector_field_influence_x:           f64,
    #[serde(rename = "vectorFieldInfluenceY")]
    pub vector_field_influence_y:           f64,
    #[serde(rename = "vectorFieldScale")]
    pub vector_field_scale:                 f64,
    #[serde(rename = "vectorFieldVariationByVelocity")]
    pub vector_field_variation_by_velocity: SpeedMultiplierByVelocity,
    #[serde(rename = "vectorFieldStyle")]
    pub vector_field_style:                 String,
    #[serde(rename = "rotationAlignToVelocity")]
    pub rotation_align_to_velocity:         f64,
    #[serde(rename = "rotationInitialRandomness")]
    pub rotation_initial_randomness:        f64,
    #[serde(rename = "rotationInitial")]
    pub rotation_initial:                   f64,
    #[serde(rename = "rotationDirectionIsRandom")]
    pub rotation_direction_is_random:       bool,
    #[serde(rename = "rotationSpinRateRandomness")]
    pub rotation_spin_rate_randomness:      f64,
    #[serde(rename = "rotationSpinRateByVelocity")]
    pub rotation_spin_rate_by_velocity:     SpeedMultiplierByVelocity,
    #[serde(rename = "exposeLocation")]
    pub expose_location:                    bool,
    #[serde(rename = "exposeSpawnRate")]
    pub expose_spawn_rate:                  bool,
    #[serde(rename = "exposeLifetime")]
    pub expose_lifetime:                    bool,
    #[serde(rename = "exposeShape")]
    pub expose_shape:                       bool,
    #[serde(rename = "exposeSize")]
    pub expose_size:                        bool,
    #[serde(rename = "exposeSpeed")]
    pub expose_speed:                       bool,
    #[serde(rename = "exposeStretch")]
    pub expose_stretch:                     bool,
    #[serde(rename = "exposeInitialColour")]
    pub expose_initial_colour:              bool,
    #[serde(rename = "exposeColourByLife")]
    pub expose_colour_by_life:              bool,
    #[serde(rename = "exposeVelocity")]
    pub expose_velocity:                    bool,
    #[serde(rename = "exposeAcceleration")]
    pub expose_acceleration:                bool,
    #[serde(rename = "exposeNoteWind")]
    pub expose_note_wind:                   bool,
    #[serde(rename = "exposeVectorField")]
    pub expose_vector_field:                bool,
    #[serde(rename = "exposeRotation")]
    pub expose_rotation:                    bool,
    #[serde(rename = "autoReleaseSystem")]
    pub auto_release_system:                bool,
    #[serde(rename = "autoReleaseTime")]
    pub auto_release_time:                  f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Pulses {
    #[serde(rename = "pulsesEnabled")]
    pub pulses_enabled:           bool,
    #[serde(rename = "pulseArrayV2")]
    pub pulse_array_v2:           Vec<PulseArrayV2>,
    #[serde(rename = "pickRandomSinglePulse")]
    pub pick_random_single_pulse: bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PulseArrayV2 {
    pub enabled:                      bool,
    pub name:                         String,
    pub author:                       String,
    pub description:                  String,
    #[serde(rename = "allowInRandomPool")]
    pub allow_in_random_pool:         bool,
    #[serde(rename = "useInRandomizer")]
    pub use_in_randomizer:            bool,
    #[serde(rename = "minActivation")]
    pub min_activation:               f64,
    #[serde(rename = "maxActivation")]
    pub max_activation:               f64,
    #[serde(rename = "timeOffset")]
    pub time_offset:                  f64,
    pub zheight:                      f64,
    #[serde(rename = "yheightByLifetime")]
    pub yheight_by_lifetime:          SpeedMultiplierByVelocity,
    #[serde(rename = "yheightByLifetime2")]
    pub yheight_by_lifetime2:         SpeedMultiplierByVelocity,
    #[serde(rename = "yheightByVelocity")]
    pub yheight_by_velocity:          SpeedMultiplierByVelocity,
    #[serde(rename = "offsetLocationUpwards")]
    pub offset_location_upwards:      bool,
    #[serde(rename = "offsetAngle")]
    pub offset_angle:                 f64,
    #[serde(rename = "lifetimeByVelocity")]
    pub lifetime_by_velocity:         SpeedMultiplierByVelocity,
    #[serde(rename = "lifetimeMode")]
    pub lifetime_mode:                String,
    #[serde(rename = "lifetimeHoldPoint")]
    pub lifetime_hold_point:          f64,
    #[serde(rename = "holdBlendBackwards")]
    pub hold_blend_backwards:         bool,
    pub stencil:                      String,
    #[serde(rename = "useTranslucent")]
    pub use_translucent:              bool,
    #[serde(rename = "useOnlyStencilColour")]
    pub use_only_stencil_colour:      bool,
    #[serde(rename = "spriteFramerateByVelocity")]
    pub sprite_framerate_by_velocity: SpeedMultiplierByVelocity,
    #[serde(rename = "spriteLoop")]
    pub sprite_loop:                  bool,
    #[serde(rename = "randomSpriteStart")]
    pub random_sprite_start:          bool,
    #[serde(rename = "randomSpriteDirection")]
    pub random_sprite_direction:      bool,
    #[serde(rename = "cullHorizontal")]
    pub cull_horizontal:              bool,
    #[serde(rename = "cullVertical")]
    pub cull_vertical:                bool,
    #[serde(rename = "startAngleRandomness")]
    pub start_angle_randomness:       f64,
    #[serde(rename = "startAngle")]
    pub start_angle:                  f64,
    #[serde(rename = "randomSpin")]
    pub random_spin:                  bool,
    #[serde(rename = "spinByVelocity")]
    pub spin_by_velocity:             SpeedMultiplierByVelocity,
    #[serde(rename = "spinByLifetime")]
    pub spin_by_lifetime:             SpeedMultiplierByVelocity,
    #[serde(rename = "sizeByVelocity")]
    pub size_by_velocity:             SpeedMultiplierByVelocity,
    #[serde(rename = "sizeByLifetime1")]
    pub size_by_lifetime1:            SpeedMultiplierByVelocity,
    #[serde(rename = "sizeByLifetime2")]
    pub size_by_lifetime2:            SpeedMultiplierByVelocity,
    #[serde(rename = "alphaByVelocity")]
    pub alpha_by_velocity:            SpeedMultiplierByVelocity,
    #[serde(rename = "alphaByLifetime1")]
    pub alpha_by_lifetime1:           SpeedMultiplierByVelocity,
    #[serde(rename = "alphaByLifetime2")]
    pub alpha_by_lifetime2:           SpeedMultiplierByVelocity,
    #[serde(rename = "brightnessByVelocity")]
    pub brightness_by_velocity:       SpeedMultiplierByVelocity,
    #[serde(rename = "brightnessByLifetime1")]
    pub brightness_by_lifetime1:      SpeedMultiplierByVelocity,
    #[serde(rename = "brightnessByLifetime2")]
    pub brightness_by_lifetime2:      SpeedMultiplierByVelocity,
    #[serde(rename = "worldStencilOn")]
    pub world_stencil_on:             bool,
    #[serde(rename = "worldStencil")]
    pub world_stencil:                String,
    #[serde(rename = "worldStencilFlip")]
    pub world_stencil_flip:           bool,
    #[serde(rename = "worldStencilMapping")]
    pub world_stencil_mapping:        WorldStencilMapping,
    #[serde(rename = "whiteKeyStretch")]
    pub white_key_stretch:            BackdropTexturePanning,
    #[serde(rename = "blackKeyStretch")]
    pub black_key_stretch:            BackdropTexturePanning,
    #[serde(rename = "fullColourSettings")]
    pub full_colour_settings:         ImpactColour,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct WorldStencilMapping {
    pub size:            f64,
    #[serde(rename = "scaleX")]
    pub scale_x:         f64,
    #[serde(rename = "scaleY")]
    pub scale_y:         f64,
    #[serde(rename = "offsetX")]
    pub offset_x:        f64,
    #[serde(rename = "offsetY")]
    pub offset_y:        f64,
    pub panning:         BackdropTexturePanning,
    #[serde(rename = "randomPanning")]
    pub random_panning:  bool,
    pub mode:            String,
    pub rotation:        f64,
    #[serde(rename = "randomRotation")]
    pub random_rotation: bool,
    #[serde(rename = "randomMapping")]
    pub random_mapping:  bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Scene {
    pub visibilities:             Visibilities,
    #[serde(rename = "sceneColours")]
    pub scene_colours:            SceneColours,
    #[serde(rename = "pianoWhiteKeyMaterial")]
    pub piano_white_key_material: Material,
    #[serde(rename = "pianoBlackKeyMaterial")]
    pub piano_black_key_material: Material,
    #[serde(rename = "backdropMaterial")]
    pub backdrop_material:        Material,
    #[serde(rename = "backdropTexturePanning")]
    pub backdrop_texture_panning: BackdropTexturePanning,
    #[serde(rename = "overlayMaterial")]
    pub overlay_material:         Material,
    #[serde(rename = "overlayTexturePanning")]
    pub overlay_texture_panning:  BackdropTexturePanning,
    #[serde(rename = "overlayHeight")]
    pub overlay_height:           f64,
    #[serde(rename = "octaveMaterial")]
    pub octave_material:          Material,
    #[serde(rename = "damperMaterial")]
    pub damper_material:          Material,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SceneColours {
    #[serde(rename = "ambientBrightness")]
    pub ambient_brightness: f64,
    #[serde(rename = "ambientTint")]
    pub ambient_tint:       Colour,
    #[serde(rename = "voidColour")]
    pub void_colour:        Colour,
    #[serde(rename = "feltColour")]
    pub felt_colour:        Colour,
    #[serde(rename = "damperFeltColour")]
    pub damper_felt_colour: Colour,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Visibilities {
    #[serde(rename = "backdropVisibility")]
    pub backdrop_visibility:      bool,
    #[serde(rename = "frameVisibility")]
    pub frame_visibility:         bool,
    #[serde(rename = "pianoVisibility")]
    pub piano_visibility:         bool,
    #[serde(rename = "pianoIsPlane")]
    pub piano_is_plane:           bool,
    #[serde(rename = "octaveLinesVisibility")]
    pub octave_lines_visibility:  bool,
    #[serde(rename = "overlayEnabled")]
    pub overlay_enabled:          bool,
    #[serde(rename = "overlayIsBackdrop")]
    pub overlay_is_backdrop:      bool,
    #[serde(rename = "overlayIsNote")]
    pub overlay_is_note:          bool,
    #[serde(rename = "overlayIsPiano")]
    pub overlay_is_piano:         bool,
    #[serde(rename = "pianoWoodInner")]
    pub piano_wood_inner:         bool,
    #[serde(rename = "dampersVisibility")]
    pub dampers_visibility:       bool,
    #[serde(rename = "upperDampersVisibility")]
    pub upper_dampers_visibility: bool,
    #[serde(rename = "damperStyle")]
    pub damper_style:             String,
    #[serde(rename = "damperZHeight")]
    pub damper_z_height:          f64,
    #[serde(rename = "damperDisplacement")]
    pub damper_displacement:      f64,
    #[serde(rename = "damperYStretch")]
    pub damper_y_stretch:         f64,
    #[serde(rename = "damperZStretch")]
    pub damper_z_stretch:         f64,
    #[serde(rename = "frameIsBackdrop")]
    pub frame_is_backdrop:        bool,
    #[serde(rename = "frameIsNote")]
    pub frame_is_note:            bool,
    #[serde(rename = "frameIsPiano")]
    pub frame_is_piano:           bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Widgets {
    #[serde(rename = "lightBarsEnabled")]
    pub light_bars_enabled: bool,
    #[serde(rename = "lightBars")]
    pub light_bars:         Vec<LightBar>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct LightBar {
    pub name:                       String,
    pub author:                     String,
    pub description:                String,
    pub enabled:                    bool,
    #[serde(rename = "useInRandomizer")]
    pub use_in_randomizer:          bool,
    #[serde(rename = "randomizerWeight")]
    pub randomizer_weight:          f64,
    #[serde(rename = "baseLocation")]
    pub base_location:              String,
    #[serde(rename = "locationOffset")]
    pub location_offset:            CameraLocation,
    pub length:                     f64,
    pub stretch:                    f64,
    #[serde(rename = "cullHorizontal")]
    pub cull_horizontal:            bool,
    #[serde(rename = "cullVertical")]
    pub cull_vertical:              bool,
    #[serde(rename = "activityBounds")]
    pub activity_bounds:            BackdropTexturePanning,
    #[serde(rename = "activitySensitivity")]
    pub activity_sensitivity:       f64,
    #[serde(rename = "flickerSpeedByActivity")]
    pub flicker_speed_by_activity:  SpeedMultiplierByVelocity,
    #[serde(rename = "flickerAmountByActivity")]
    pub flicker_amount_by_activity: SpeedMultiplierByVelocity,
    pub colour:                     ImpactColour,
    #[serde(rename = "bendHue")]
    pub bend_hue:                   CameraLocation,
    #[serde(rename = "coreArray")]
    pub core_array:                 Vec<CoreElement>,
    #[serde(rename = "gradientArray")]
    pub gradient_array:             Vec<GradientElement>,
    #[serde(rename = "plasmaArray")]
    pub plasma_array:               Vec<PlasmaElement>,
    #[serde(rename = "wispArray")]
    pub wisp_array:                 Vec<WispElement>,
    #[serde(rename = "lightArray")]
    pub light_array:                Vec<Option<serde_json::Value>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CoreElement {
    pub name:                       String,
    #[serde(rename = "useLocalCull")]
    pub use_local_cull:             bool,
    #[serde(rename = "cullHorizontal")]
    pub cull_horizontal:            bool,
    #[serde(rename = "cullVertical")]
    pub cull_vertical:              bool,
    #[serde(rename = "cullVertLocal")]
    pub cull_vert_local:            bool,
    #[serde(rename = "locationOffset")]
    pub location_offset:            CameraLocation,
    #[serde(rename = "xStretch")]
    pub x_stretch:                  f64,
    #[serde(rename = "yStretch")]
    pub y_stretch:                  f64,
    #[serde(rename = "hueBend")]
    pub hue_bend:                   CameraLocation,
    #[serde(rename = "brightnessByActivity")]
    pub brightness_by_activity:     SpeedMultiplierByVelocity,
    #[serde(rename = "flickerSpeedByActivity")]
    pub flicker_speed_by_activity:  SpeedMultiplierByVelocity,
    #[serde(rename = "flickerAmountByActivity")]
    pub flicker_amount_by_activity: SpeedMultiplierByVelocity,
    #[serde(rename = "useGlobalFlickerSeed")]
    pub use_global_flicker_seed:    bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GradientElement {
    pub name:                       String,
    #[serde(rename = "useLocalCull")]
    pub use_local_cull:             bool,
    #[serde(rename = "cullHorizontal")]
    pub cull_horizontal:            bool,
    #[serde(rename = "cullVertical")]
    pub cull_vertical:              bool,
    #[serde(rename = "locationOffset")]
    pub location_offset:            CameraLocation,
    #[serde(rename = "xStretch")]
    pub x_stretch:                  f64,
    #[serde(rename = "yStretch")]
    pub y_stretch:                  f64,
    #[serde(rename = "hueBend")]
    pub hue_bend:                   CameraLocation,
    #[serde(rename = "hueBendVertical")]
    pub hue_bend_vertical:          f64,
    #[serde(rename = "brightnessByActivity")]
    pub brightness_by_activity:     SpeedMultiplierByVelocity,
    #[serde(rename = "flickerSpeedByActivity")]
    pub flicker_speed_by_activity:  SpeedMultiplierByVelocity,
    #[serde(rename = "flickerAmountByActivity")]
    pub flicker_amount_by_activity: SpeedMultiplierByVelocity,
    #[serde(rename = "useGlobalFlickerSeed")]
    pub use_global_flicker_seed:    bool,
    pub bend:                       f64,
    pub opacity:                    f64,
    pub concentration:              f64,
    #[serde(rename = "materialMode")]
    pub material_mode:              f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PlasmaElement {
    pub name:                       String,
    #[serde(rename = "useLocalCull")]
    pub use_local_cull:             bool,
    #[serde(rename = "cullHorizontal")]
    pub cull_horizontal:            bool,
    #[serde(rename = "cullVertical")]
    pub cull_vertical:              bool,
    #[serde(rename = "locationOffset")]
    pub location_offset:            CameraLocation,
    #[serde(rename = "xStretch")]
    pub x_stretch:                  f64,
    #[serde(rename = "yStretch")]
    pub y_stretch:                  f64,
    #[serde(rename = "hueBend")]
    pub hue_bend:                   CameraLocation,
    #[serde(rename = "brightnessByActivity")]
    pub brightness_by_activity:     SpeedMultiplierByVelocity,
    #[serde(rename = "flickerSpeedByActivity")]
    pub flicker_speed_by_activity:  SpeedMultiplierByVelocity,
    #[serde(rename = "flickerAmountByActivity")]
    pub flicker_amount_by_activity: SpeedMultiplierByVelocity,
    #[serde(rename = "useGlobalFlickerSeed")]
    pub use_global_flicker_seed:    bool,
    #[serde(rename = "xSpeed")]
    pub x_speed:                    f64,
    #[serde(rename = "zSpeed")]
    pub z_speed:                    f64,
    #[serde(rename = "speedByActivity")]
    pub speed_by_activity:          SpeedMultiplierByVelocity,
    #[serde(rename = "xScale")]
    pub x_scale:                    f64,
    #[serde(rename = "yDisplaceByActivity")]
    pub y_displace_by_activity:     SpeedMultiplierByVelocity,
    #[serde(rename = "randomOffset")]
    pub random_offset:              bool,
    pub concentration:              f64,
    #[serde(rename = "edgeAmount")]
    pub edge_amount:                f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct WispElement {
    pub name:                       String,
    #[serde(rename = "useLocalCull")]
    pub use_local_cull:             bool,
    #[serde(rename = "cullHorizontal")]
    pub cull_horizontal:            bool,
    #[serde(rename = "cullVertical")]
    pub cull_vertical:              bool,
    #[serde(rename = "cullVertLocal")]
    pub cull_vert_local:            bool,
    #[serde(rename = "locationOffset")]
    pub location_offset:            CameraLocation,
    #[serde(rename = "xStretch")]
    pub x_stretch:                  f64,
    #[serde(rename = "yStretch")]
    pub y_stretch:                  f64,
    #[serde(rename = "hueBend")]
    pub hue_bend:                   CameraLocation,
    #[serde(rename = "brightnessByActivity")]
    pub brightness_by_activity:     SpeedMultiplierByVelocity,
    #[serde(rename = "flickerSpeedByActivity")]
    pub flicker_speed_by_activity:  SpeedMultiplierByVelocity,
    #[serde(rename = "flickerAmountByActivity")]
    pub flicker_amount_by_activity: SpeedMultiplierByVelocity,
    #[serde(rename = "useGlobalFlickerSeed")]
    pub use_global_flicker_seed:    bool,
    #[serde(rename = "panXSpeed")]
    pub pan_x_speed:                f64,
    #[serde(rename = "panYSpeed")]
    pub pan_y_speed:                f64,
    #[serde(rename = "panZSpeed")]
    pub pan_z_speed:                f64,
    #[serde(rename = "speedByActivity")]
    pub speed_by_activity:          SpeedMultiplierByVelocity,
    #[serde(rename = "randomOffset")]
    pub random_offset:              bool,
    #[serde(rename = "overallScale")]
    pub overall_scale:              f64,
    #[serde(rename = "wispStretch")]
    pub wisp_stretch:               f64,
    #[serde(rename = "detailScale")]
    pub detail_scale:               f64,
    pub sparsity:                   f64,
    #[serde(rename = "overallFadeout")]
    pub overall_fadeout:            f64,
    #[serde(rename = "coreConcentration")]
    pub core_concentration:         f64,
    #[serde(rename = "coreAmount")]
    pub core_amount:                f64,
    #[serde(rename = "overallConcentration")]
    pub overall_concentration:      f64,
    #[serde(rename = "edgeBend")]
    pub edge_bend:                  f64,
    #[serde(rename = "edgeAmount")]
    pub edge_amount:                f64,
}

pub trait Texturable {
    fn diffuse(&self) -> Option<&str>;
    fn emissive(&self) -> Option<&str>;
    fn mask(&self) -> Option<&str>;
    fn metalness(&self) -> Option<&str>;
    fn normal(&self) -> Option<&str>;
    fn roughness(&self) -> Option<&str>;
    fn specular(&self) -> Option<&str>;
}

macro_rules! impl_texturable {
    ($($t:ty)*) => {
        $(
        impl crate::preset::Texturable for $t {
            fn diffuse(&self) -> Option<&str> {
                if self.diffuse_use_texture {
                    Some(&self.diffuse_texture)
                } else {
                    None
                }
            }
            fn emissive(&self) -> Option<&str> {
                if self.emissive_use_texture {
                    Some(&self.emissive_texture)
                } else {
                    None
                }
            }
            fn mask(&self) -> Option<&str> {
                if self.mask_on {
                    Some(&self.mask_texture)
                } else {
                    None
                }
            }
            fn metalness(&self) -> Option<&str> {
                if self.metalness_use_texture {
                    Some(&self.metalness_texture)
                } else {
                    None
                }
            }
            fn normal(&self) -> Option<&str> {
                if self.normal_on {
                    Some(&self.normal_texture)
                } else {
                    None
                }
            }
            fn roughness(&self) -> Option<&str> {
                if self.roughness_use_texture {
                    Some(&self.roughness_texture)
                } else {
                    None
                }
            }
            fn specular(&self) -> Option<&str> {
                if self.specular_use_texture {
                    Some(&self.roughness_texture)
                } else {
                    None
                }
            }
        }
    )*
    }
}

impl_texturable!(Material);
